@page
@model BlogX.WebUI.Pages.Admin.Posts.CreateModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Create post";

    var requestToken = Antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}

<h1>Create</h1>

<h4>Post</h4>
<hr />
<form class="row g-3" method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="col-12">
        <label asp-for="PostVM.Title" class="control-label"></label>
        <input asp-for="PostVM.Title" class="form-control" />
        <span asp-validation-for="PostVM.Title" class="text-danger"></span>
    </div>
    <div class="col-12">
        <label asp-for="PostVM.Content" class="control-label"></label>
        @*<textarea id="editor" asp-for="PostVM.Content" class="form-control"></textarea>*@
        <div id="editor"></div>
        <span asp-validation-for="PostVM.Content" class="text-danger"></span>
    </div>
    <div class="col-12">
        <label asp-for="PostVM.Author" class="control-label"></label>
        <input asp-for="PostVM.Author" class="form-control" />
        <span asp-validation-for="PostVM.Author" class="text-danger"></span>
    </div>
    <div class="col-12">
        <input type="submit" value="Create" class="btn btn-primary" />
        <a asp-page="Index" role="button" class="btn btn-secondary">Back to List</a>
    </div>
</form>

@section OtherHeads{
    <!-- Editor's Style -->
    <link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />
}

@section Scripts {
    <script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        const Editor = toastui.Editor;
        const editor = new Editor({
            el: document.querySelector('#editor'),
            height: '100vh',
            initialEditType: 'markdown',
            previewStyle: 'vertical',
            hooks: {
                addImageBlobHook: async function (file, callback) {
                    const r = await fileUpload(file)

                    callback(r);
                },
            }
        });


        async function fileUpload(file) {
            const formData = new FormData();

            formData.append("file", file);

            try {
                const response = await fetch("/api/blob", {
                    method: 'POST',
                    body: formData,
                    //headers: {
                    //    RequestVerificationToken: '@requestToken'
                    //}
                });

                console.log(response)

                if(!response.ok)
                    return "";

                return response.headers.get("Location")
            } catch (error) {
                console.error('Error:', error);

                return ""
            }
        }
    </script>
}